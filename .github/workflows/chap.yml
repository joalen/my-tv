name: VMware Chap Runner

on:
  push:

jobs:
  run-vmwarechap:
    runs-on: ubuntu-22.04

    steps:
      - name: Check out repository
        uses: actions/checkout@v2
        with:
          ref: d65ac508eb56d454d565d7a53df35fa4d5403720

      - name: Set up QEMU (to support ARM 32-bit)
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Create Dockerfile
        run: |
          echo 'FROM ubuntu:22.04' > Dockerfile
          echo 'RUN apt-get update && apt-get install -y make cmake git' >> Dockerfile

      - name: Build Docker image for ARM 32-bit
        run: |
          docker buildx build --platform linux/arm/v7 -t arm32-build .

      - name: Run build and tests in Docker
        run: |
          docker run --platform linux/arm/v7 arm32-build /bin/bash -c "
            cd /github/workspace &&
            git clone https://github.com/vmware/chap.git /tmp/chap &&
            cd /tmp/chap &&
            git submodule update --init --recursive &&
            mkdir build-chap &&
            cd build-chap &&
            cmake ../ &&
            make &&
            set +e &&
            directory=\"$GITHUB_WORKSPACE\" &&
            ulimit -c unlimited &&
            find \"$directory\" -name '*.so' -exec sh -c '
              for so_file do
                \"$so_file\"
              done
            ' sh {} + &&
            commands=(\"count\" \"describe\" \"dump\" \"enumerate\" \"explain\" \"list\" \"show\" \"summarize\") &&
            sub_commands=(\"allocations\" \"anchored\" \"anchorpoints\" \"externalanchored\" \"externalanchorpoints\" \"free\" \"inaccessible\" \"leaked\" \"readonly\" \"registeranchored\" \"registeranchorpoints\" \"rxonly\" \"stackanchorpoints\") &&
            for core_file in /var/lib/apport/coredump/*; do
              if [ -f \"$core_file\" ]; then
                for command in \"${commands[@]}\"; do
                  for sub_command in \"${sub_commands[@]}\"; do
                    /tmp/chap/build-chap/chap \"$core_file\" <<EOF
                    $command $sub_command
            EOF
                  done
                done
              fi
            done
          "
